<%= form_for(@game) do |f| %>
  <% if @game.errors.any? %>
    <div id="error_explanation">
      <h2>There <%= @game.errors.count == 1 ? 'was an error' : 'were ' + pluralize(@game.errors.count, "error") %> stopping the game from being saved:</h2>

      <ul>
      <% @game.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="actions">
    <div>
    <div style="display: inline-block;"><%= f.label :player_id, "Player" %></div>
    <div style="float: right;"><%= link_to "Create New Player", new_player_path %></div>
    </div>
    <%= f.select :player_id, options_for_select(Player.all.map { |player| [player.name, player.id] }), :class => 'form-control' %>

    <%= f.label :custom_word, "Use own custom word?" %>
    <%= f.check_box :custom_word, { :class => "custom-word-checkbox" }, "checked", "" %>

    <div class="custom-word-field">
      <%= f.label :word_to_guess, "Word to guess" %>
      <%= f.password_field :word_to_guess, class: 'form-control' %>
    </div>

    <%= f.label :number_of_lives, "Number of guesses" %>
    <%= f.text_field :number_of_lives, class: 'form-control' %>

    <%= f.submit (f.object.new_record? ? "Create" : "Save") + " Game", class: "btn btn-primary" %>
  </div>
<% end %>

<script>
$(function() {
  // When the checkbox is toggled, show/hide the custom word field
  var $customWordField = $('.custom-word-field');
  $('.custom-word-checkbox').change(function(e) {
    if ( $(this).is(":checked") )  {
      $customWordField.css("max-height", 60);
      $customWordField.css("opacity", 1);
      $customWordField.css("visibility", "visible");
    } else {
      $customWordField.css("max-height", 0);
      $customWordField.css("opacity", 0);
      $customWordField.css("visibility", "hidden");
    }
  });

  // If the field for the custom word was showing, make it expanded by default again
  if (<%= params[:game] && params[:game][:custom_word] == "checked" ? true : false %>) {
    $customWordField.addClass('notransition');
    $('.custom-word-checkbox').prop('checked', true);
    $customWordField.css("max-height", 60);
    $customWordField.css("opacity", 1);
    $customWordField.css("visibility", "visible");
    $customWordField[0].offsetHeight;
    $customWordField.removeClass('notransition');
  }

  // Set word to either the last custom word, or a random word by default
  if ( !$('.custom-word-checkbox').is(":checked") )  {
    $('#game_word_to_guess').val("<%= GamesHelper.random_word %>")
  } else {
    $('#game_word_to_guess').val("<%= params[:game][:custom_word] if params[:game] %>")
  }

  // Set default number of lives
  if ( $('#game_number_of_lives').val() == "" )  {
    $('#game_number_of_lives').val("5")
  }

  $("#game_player_id").focus();
});
</script>
