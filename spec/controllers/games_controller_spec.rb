require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe GamesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Game. As you add validations to Game, be sure to
  # adjust the attributes here as well.

  let(:admin) { User.create!(name: "Admin", email: "admin@example.com", password: "foobar", password_confirmation: "foobar", admin: true) }
  let(:user) { User.create!(name: "Jordane", email: "user@user.com", password: "foobar", password_confirmation: "foobar", admin: false) }
  let(:john) { User.create!(name: "John", email: "john@example.com", password: "foobar", password_confirmation: "foobar", admin: false) }

  let(:valid_attributes) {
    { word_to_guess: "word", initial_number_of_lives: 2, user: user, user_id: user.id }
  }

  let(:invalid_attributes) {
    { word_to_guess: "", initial_number_of_lives: -1, user: user, user_id: user.id }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GamesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    context "when logged in" do
      before do
        log_in user
      end

      it "assigns all games as @games" do
        game = Game.create! valid_attributes
        get :index, {}, valid_session
        expect(assigns(:games)).to eq [game]
        expect(assigns(:games).length).to eq 1
      end
    end

    context "when logged out" do
      before do
        log_out if logged_in?
      end

      it "redirects the user to the login page" do
        get :index, {}, valid_session
        expect(response).to redirect_to(login_url)
      end
    end
  end

  describe "GET #show" do
    context "when logged in" do
      before do
        log_in user
      end

      it "assigns the requested game as @game" do
        game = Game.create! valid_attributes
        get :show, {:id => game.to_param}, valid_session
        expect(assigns(:game)).to eq game
      end
    end

    context "when logged out" do
      before do
        log_out if logged_in?
      end

      it "redirects the user to the login page" do
        game = Game.create! valid_attributes
        get :show, {:id => game.to_param}, valid_session
        expect(response).to redirect_to(login_url)
      end
    end
  end

  describe "GET #new" do
    context "when logged in" do
      before do
        log_in user
      end

      it "assigns a new game as @game" do
        get :new, {}, valid_session
        expect(assigns(:game)).to be_a(Game)
      end

      it "redirects the user to the new game" do
        get :new, {}, valid_session
        expect(response).to redirect_to(assigns(:game))
      end
    end

    context "when logged out" do
      before do
        log_out if logged_in?
      end

      it "redirects the user to the login page" do
        get :new, {}, valid_session
        expect(response).to redirect_to(login_url)
      end
    end
  end

  describe "GET #custom" do
    context "when logged in" do
      before do
        log_in user
      end

      it "assigns a new custom game as @game" do
        get :custom, {}, valid_session
        expect(assigns(:game)).to be_a_new(Game)
      end
    end

    context "when logged out" do
      before do
        log_out if logged_in?
      end
      it "redirects the user to the login page" do
        get :custom, {}, valid_session
        expect(response).to redirect_to(login_url)
      end
    end
  end

  describe "POST #create" do
    context "when logged in" do
      before do
        log_in user
      end

      context "with valid params" do
        it "creates a new game" do
          expect {
            post :create, {:game => valid_attributes}, valid_session
          }.to change(Game, :count).by(1)
        end

        it "assigns a newly created game as @game" do
          post :create, {:game => valid_attributes}, valid_session
          expect(assigns(:game)).to be_a(Game)
          expect(assigns(:game)).to be_persisted
        end

        it "redirects to the created game" do
          post :create, {:game => valid_attributes}, valid_session
          expect(response).to redirect_to(Game.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved game as @game" do
          post :create, {:game => invalid_attributes}, valid_session
          expect(assigns(:game)).to be_a_new(Game)
        end

        it "re-renders the 'new' template" do
          post :create, {:game => invalid_attributes}, valid_session
          expect(response).to render_template("new")
        end
      end
    end

    context "when logged out" do
      before do
        log_out if logged_in?
      end

      it "redirects to the sign in page" do
        post :create, {:game => valid_attributes}, valid_session
        expect(response).to redirect_to(login_url)
      end
    end
  end

  describe "DELETE #destroy" do
    context "when logged in as an admin" do
      before do
        log_in admin
      end

      it "destroys the requested game" do
        game = Game.create! valid_attributes
        expect {
          delete :destroy, {:id => game.to_param}, valid_session
        }.to change(Game, :count).by(-1)
      end

      it "redirects to the games list" do
        game = Game.create! valid_attributes
        delete :destroy, {:id => game.to_param}, valid_session
        expect(response).to redirect_to(games_url)
      end
    end

    context "when logged in as the player of the game" do
      before do
        log_in user
      end

      it "doesn't destroy the requested game" do
        game = Game.create! valid_attributes
        expect {
          delete :destroy, {:id => game.to_param}, valid_session
        }.to change(Game, :count).by(0)
      end

      it "redirects to the games list" do
        game = Game.create! valid_attributes
        delete :destroy, {:id => game.to_param}, valid_session
        expect(response).to redirect_to(root_url)
      end
    end

    context "when logged in as the player of the game" do
      it "doesn't destroy the requested game" do
        game = Game.create! valid_attributes
        expect {
          delete :destroy, {:id => game.to_param}, valid_session
        }.to change(Game, :count).by(0)
      end

      it "redirects to the login page" do
        game = Game.create! valid_attributes
        delete :destroy, {:id => game.to_param}, valid_session
        expect(response).to redirect_to(login_url)
      end
    end
  end
end
